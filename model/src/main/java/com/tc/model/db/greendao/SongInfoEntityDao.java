package com.tc.model.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tc.model.entity.SongInfoEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SONG_INFO_ENTITY".
*/
public class SongInfoEntityDao extends AbstractDao<SongInfoEntity, String> {

    public static final String TABLENAME = "SONG_INFO_ENTITY";

    /**
     * Properties of entity SongInfoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Song_id = new Property(0, String.class, "song_id", true, "SONG_ID");
        public final static Property Resource_type_ext = new Property(1, String.class, "resource_type_ext", false, "RESOURCE_TYPE_EXT");
        public final static Property Resource_type = new Property(2, String.class, "resource_type", false, "RESOURCE_TYPE");
        public final static Property Del_status = new Property(3, String.class, "del_status", false, "DEL_STATUS");
        public final static Property Collect_num = new Property(4, int.class, "collect_num", false, "COLLECT_NUM");
        public final static Property Hot = new Property(5, String.class, "hot", false, "HOT");
        public final static Property Sound_effect = new Property(6, String.class, "sound_effect", false, "SOUND_EFFECT");
        public final static Property Title = new Property(7, String.class, "title", false, "TITLE");
        public final static Property Language = new Property(8, String.class, "language", false, "LANGUAGE");
        public final static Property Play_type = new Property(9, int.class, "play_type", false, "PLAY_TYPE");
        public final static Property Country = new Property(10, String.class, "country", false, "COUNTRY");
        public final static Property Biaoshi = new Property(11, String.class, "biaoshi", false, "BIAOSHI");
        public final static Property Bitrate_fee = new Property(12, String.class, "bitrate_fee", false, "BITRATE_FEE");
        public final static Property Song_source = new Property(13, String.class, "song_source", false, "SONG_SOURCE");
        public final static Property Is_first_publish = new Property(14, int.class, "is_first_publish", false, "IS_FIRST_PUBLISH");
        public final static Property Artist_640_1136 = new Property(15, String.class, "artist_640_1136", false, "ARTIST_640_1136");
        public final static Property Is_secret = new Property(16, String.class, "is_secret", false, "IS_SECRET");
        public final static Property Charge = new Property(17, int.class, "charge", false, "CHARGE");
        public final static Property Album_500_500 = new Property(18, String.class, "album_500_500", false, "ALBUM_500_500");
        public final static Property Korean_bb_song = new Property(19, String.class, "korean_bb_song", false, "KOREAN_BB_SONG");
        public final static Property Has_mv_mobile = new Property(20, int.class, "has_mv_mobile", false, "HAS_MV_MOBILE");
        public final static Property Album_no = new Property(21, String.class, "album_no", false, "ALBUM_NO");
        public final static Property Is_charge = new Property(22, String.class, "is_charge", false, "IS_CHARGE");
        public final static Property Pic_radio = new Property(23, String.class, "pic_radio", false, "PIC_RADIO");
        public final static Property Has_filmtv = new Property(24, String.class, "has_filmtv", false, "HAS_FILMTV");
        public final static Property Pic_huge = new Property(25, String.class, "pic_huge", false, "PIC_HUGE");
        public final static Property Ting_uid = new Property(26, String.class, "ting_uid", false, "TING_UID");
        public final static Property Expire = new Property(27, int.class, "expire", false, "EXPIRE");
        public final static Property Pic_singer = new Property(28, String.class, "pic_singer", false, "PIC_SINGER");
        public final static Property Si_proxycompany = new Property(29, String.class, "si_proxycompany", false, "SI_PROXYCOMPANY");
        public final static Property Compose = new Property(30, String.class, "compose", false, "COMPOSE");
        public final static Property Toneid = new Property(31, String.class, "toneid", false, "TONEID");
        public final static Property Area = new Property(32, String.class, "area", false, "AREA");
        public final static Property Original_rate = new Property(33, String.class, "original_rate", false, "ORIGINAL_RATE");
        public final static Property Artist_500_500 = new Property(34, String.class, "artist_500_500", false, "ARTIST_500_500");
        public final static Property Multiterminal_copytype = new Property(35, String.class, "multiterminal_copytype", false, "MULTITERMINAL_COPYTYPE");
        public final static Property Has_mv = new Property(36, int.class, "has_mv", false, "HAS_MV");
        public final static Property Album_title = new Property(37, String.class, "album_title", false, "ALBUM_TITLE");
        public final static Property Piao_id = new Property(38, String.class, "piao_id", false, "PIAO_ID");
        public final static Property High_rate = new Property(39, String.class, "high_rate", false, "HIGH_RATE");
        public final static Property Compress_status = new Property(40, String.class, "compress_status", false, "COMPRESS_STATUS");
        public final static Property Lrclink = new Property(41, String.class, "lrclink", false, "LRCLINK");
        public final static Property Artist_480_800 = new Property(42, String.class, "artist_480_800", false, "ARTIST_480_800");
        public final static Property Relate_status = new Property(43, String.class, "relate_status", false, "RELATE_STATUS");
        public final static Property Learn = new Property(44, int.class, "learn", false, "LEARN");
        public final static Property Pic_big = new Property(45, String.class, "pic_big", false, "PIC_BIG");
        public final static Property Artist = new Property(46, String.class, "artist", false, "ARTIST");
        public final static Property Aliasname = new Property(47, String.class, "aliasname", false, "ALIASNAME");
        public final static Property Comment_num = new Property(48, int.class, "comment_num", false, "COMMENT_NUM");
        public final static Property Album_1000_1000 = new Property(49, String.class, "album_1000_1000", false, "ALBUM_1000_1000");
        public final static Property Album_id = new Property(50, String.class, "album_id", false, "ALBUM_ID");
        public final static Property Share_num = new Property(51, int.class, "share_num", false, "SHARE_NUM");
        public final static Property Pic_premium = new Property(52, String.class, "pic_premium", false, "PIC_PREMIUM");
        public final static Property All_rate = new Property(53, String.class, "all_rate", false, "ALL_RATE");
        public final static Property Author = new Property(54, String.class, "author", false, "AUTHOR");
        public final static Property Share_url = new Property(55, String.class, "share_url", false, "SHARE_URL");
        public final static Property All_artist_id = new Property(56, String.class, "all_artist_id", false, "ALL_ARTIST_ID");
        public final static Property Songwriting = new Property(57, String.class, "songwriting", false, "SONGWRITING");
        public final static Property Publishtime = new Property(58, String.class, "publishtime", false, "PUBLISHTIME");
        public final static Property Copy_type = new Property(59, String.class, "copy_type", false, "COPY_TYPE");
        public final static Property Artist_1000_1000 = new Property(60, String.class, "artist_1000_1000", false, "ARTIST_1000_1000");
        public final static Property Versions = new Property(61, String.class, "versions", false, "VERSIONS");
        public final static Property File_duration = new Property(62, String.class, "file_duration", false, "FILE_DURATION");
        public final static Property Artist_id = new Property(63, String.class, "artist_id", false, "ARTIST_ID");
        public final static Property Original = new Property(64, int.class, "original", false, "ORIGINAL");
        public final static Property Distribution = new Property(65, String.class, "distribution", false, "DISTRIBUTION");
        public final static Property Pic_small = new Property(66, String.class, "pic_small", false, "PIC_SMALL");
        public final static Property Info = new Property(67, String.class, "info", false, "INFO");
        public final static Property Havehigh = new Property(68, int.class, "havehigh", false, "HAVEHIGH");
        public final static Property Bitrate = new Property(69, String.class, "bitrate", false, "BITRATE");
    }

    private DaoSession daoSession;


    public SongInfoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SongInfoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SONG_INFO_ENTITY\" (" + //
                "\"SONG_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: song_id
                "\"RESOURCE_TYPE_EXT\" TEXT," + // 1: resource_type_ext
                "\"RESOURCE_TYPE\" TEXT," + // 2: resource_type
                "\"DEL_STATUS\" TEXT," + // 3: del_status
                "\"COLLECT_NUM\" INTEGER NOT NULL ," + // 4: collect_num
                "\"HOT\" TEXT," + // 5: hot
                "\"SOUND_EFFECT\" TEXT," + // 6: sound_effect
                "\"TITLE\" TEXT," + // 7: title
                "\"LANGUAGE\" TEXT," + // 8: language
                "\"PLAY_TYPE\" INTEGER NOT NULL ," + // 9: play_type
                "\"COUNTRY\" TEXT," + // 10: country
                "\"BIAOSHI\" TEXT," + // 11: biaoshi
                "\"BITRATE_FEE\" TEXT," + // 12: bitrate_fee
                "\"SONG_SOURCE\" TEXT," + // 13: song_source
                "\"IS_FIRST_PUBLISH\" INTEGER NOT NULL ," + // 14: is_first_publish
                "\"ARTIST_640_1136\" TEXT," + // 15: artist_640_1136
                "\"IS_SECRET\" TEXT," + // 16: is_secret
                "\"CHARGE\" INTEGER NOT NULL ," + // 17: charge
                "\"ALBUM_500_500\" TEXT," + // 18: album_500_500
                "\"KOREAN_BB_SONG\" TEXT," + // 19: korean_bb_song
                "\"HAS_MV_MOBILE\" INTEGER NOT NULL ," + // 20: has_mv_mobile
                "\"ALBUM_NO\" TEXT," + // 21: album_no
                "\"IS_CHARGE\" TEXT," + // 22: is_charge
                "\"PIC_RADIO\" TEXT," + // 23: pic_radio
                "\"HAS_FILMTV\" TEXT," + // 24: has_filmtv
                "\"PIC_HUGE\" TEXT," + // 25: pic_huge
                "\"TING_UID\" TEXT," + // 26: ting_uid
                "\"EXPIRE\" INTEGER NOT NULL ," + // 27: expire
                "\"PIC_SINGER\" TEXT," + // 28: pic_singer
                "\"SI_PROXYCOMPANY\" TEXT," + // 29: si_proxycompany
                "\"COMPOSE\" TEXT," + // 30: compose
                "\"TONEID\" TEXT," + // 31: toneid
                "\"AREA\" TEXT," + // 32: area
                "\"ORIGINAL_RATE\" TEXT," + // 33: original_rate
                "\"ARTIST_500_500\" TEXT," + // 34: artist_500_500
                "\"MULTITERMINAL_COPYTYPE\" TEXT," + // 35: multiterminal_copytype
                "\"HAS_MV\" INTEGER NOT NULL ," + // 36: has_mv
                "\"ALBUM_TITLE\" TEXT," + // 37: album_title
                "\"PIAO_ID\" TEXT," + // 38: piao_id
                "\"HIGH_RATE\" TEXT," + // 39: high_rate
                "\"COMPRESS_STATUS\" TEXT," + // 40: compress_status
                "\"LRCLINK\" TEXT," + // 41: lrclink
                "\"ARTIST_480_800\" TEXT," + // 42: artist_480_800
                "\"RELATE_STATUS\" TEXT," + // 43: relate_status
                "\"LEARN\" INTEGER NOT NULL ," + // 44: learn
                "\"PIC_BIG\" TEXT," + // 45: pic_big
                "\"ARTIST\" TEXT," + // 46: artist
                "\"ALIASNAME\" TEXT," + // 47: aliasname
                "\"COMMENT_NUM\" INTEGER NOT NULL ," + // 48: comment_num
                "\"ALBUM_1000_1000\" TEXT," + // 49: album_1000_1000
                "\"ALBUM_ID\" TEXT," + // 50: album_id
                "\"SHARE_NUM\" INTEGER NOT NULL ," + // 51: share_num
                "\"PIC_PREMIUM\" TEXT," + // 52: pic_premium
                "\"ALL_RATE\" TEXT," + // 53: all_rate
                "\"AUTHOR\" TEXT," + // 54: author
                "\"SHARE_URL\" TEXT," + // 55: share_url
                "\"ALL_ARTIST_ID\" TEXT," + // 56: all_artist_id
                "\"SONGWRITING\" TEXT," + // 57: songwriting
                "\"PUBLISHTIME\" TEXT," + // 58: publishtime
                "\"COPY_TYPE\" TEXT," + // 59: copy_type
                "\"ARTIST_1000_1000\" TEXT," + // 60: artist_1000_1000
                "\"VERSIONS\" TEXT," + // 61: versions
                "\"FILE_DURATION\" TEXT," + // 62: file_duration
                "\"ARTIST_ID\" TEXT," + // 63: artist_id
                "\"ORIGINAL\" INTEGER NOT NULL ," + // 64: original
                "\"DISTRIBUTION\" TEXT," + // 65: distribution
                "\"PIC_SMALL\" TEXT," + // 66: pic_small
                "\"INFO\" TEXT," + // 67: info
                "\"HAVEHIGH\" INTEGER NOT NULL ," + // 68: havehigh
                "\"BITRATE\" TEXT);"); // 69: bitrate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SONG_INFO_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SongInfoEntity entity) {
        stmt.clearBindings();
 
        String song_id = entity.getSong_id();
        if (song_id != null) {
            stmt.bindString(1, song_id);
        }
 
        String resource_type_ext = entity.getResource_type_ext();
        if (resource_type_ext != null) {
            stmt.bindString(2, resource_type_ext);
        }
 
        String resource_type = entity.getResource_type();
        if (resource_type != null) {
            stmt.bindString(3, resource_type);
        }
 
        String del_status = entity.getDel_status();
        if (del_status != null) {
            stmt.bindString(4, del_status);
        }
        stmt.bindLong(5, entity.getCollect_num());
 
        String hot = entity.getHot();
        if (hot != null) {
            stmt.bindString(6, hot);
        }
 
        String sound_effect = entity.getSound_effect();
        if (sound_effect != null) {
            stmt.bindString(7, sound_effect);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(9, language);
        }
        stmt.bindLong(10, entity.getPlay_type());
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(11, country);
        }
 
        String biaoshi = entity.getBiaoshi();
        if (biaoshi != null) {
            stmt.bindString(12, biaoshi);
        }
 
        String bitrate_fee = entity.getBitrate_fee();
        if (bitrate_fee != null) {
            stmt.bindString(13, bitrate_fee);
        }
 
        String song_source = entity.getSong_source();
        if (song_source != null) {
            stmt.bindString(14, song_source);
        }
        stmt.bindLong(15, entity.getIs_first_publish());
 
        String artist_640_1136 = entity.getArtist_640_1136();
        if (artist_640_1136 != null) {
            stmt.bindString(16, artist_640_1136);
        }
 
        String is_secret = entity.getIs_secret();
        if (is_secret != null) {
            stmt.bindString(17, is_secret);
        }
        stmt.bindLong(18, entity.getCharge());
 
        String album_500_500 = entity.getAlbum_500_500();
        if (album_500_500 != null) {
            stmt.bindString(19, album_500_500);
        }
 
        String korean_bb_song = entity.getKorean_bb_song();
        if (korean_bb_song != null) {
            stmt.bindString(20, korean_bb_song);
        }
        stmt.bindLong(21, entity.getHas_mv_mobile());
 
        String album_no = entity.getAlbum_no();
        if (album_no != null) {
            stmt.bindString(22, album_no);
        }
 
        String is_charge = entity.getIs_charge();
        if (is_charge != null) {
            stmt.bindString(23, is_charge);
        }
 
        String pic_radio = entity.getPic_radio();
        if (pic_radio != null) {
            stmt.bindString(24, pic_radio);
        }
 
        String has_filmtv = entity.getHas_filmtv();
        if (has_filmtv != null) {
            stmt.bindString(25, has_filmtv);
        }
 
        String pic_huge = entity.getPic_huge();
        if (pic_huge != null) {
            stmt.bindString(26, pic_huge);
        }
 
        String ting_uid = entity.getTing_uid();
        if (ting_uid != null) {
            stmt.bindString(27, ting_uid);
        }
        stmt.bindLong(28, entity.getExpire());
 
        String pic_singer = entity.getPic_singer();
        if (pic_singer != null) {
            stmt.bindString(29, pic_singer);
        }
 
        String si_proxycompany = entity.getSi_proxycompany();
        if (si_proxycompany != null) {
            stmt.bindString(30, si_proxycompany);
        }
 
        String compose = entity.getCompose();
        if (compose != null) {
            stmt.bindString(31, compose);
        }
 
        String toneid = entity.getToneid();
        if (toneid != null) {
            stmt.bindString(32, toneid);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(33, area);
        }
 
        String original_rate = entity.getOriginal_rate();
        if (original_rate != null) {
            stmt.bindString(34, original_rate);
        }
 
        String artist_500_500 = entity.getArtist_500_500();
        if (artist_500_500 != null) {
            stmt.bindString(35, artist_500_500);
        }
 
        String multiterminal_copytype = entity.getMultiterminal_copytype();
        if (multiterminal_copytype != null) {
            stmt.bindString(36, multiterminal_copytype);
        }
        stmt.bindLong(37, entity.getHas_mv());
 
        String album_title = entity.getAlbum_title();
        if (album_title != null) {
            stmt.bindString(38, album_title);
        }
 
        String piao_id = entity.getPiao_id();
        if (piao_id != null) {
            stmt.bindString(39, piao_id);
        }
 
        String high_rate = entity.getHigh_rate();
        if (high_rate != null) {
            stmt.bindString(40, high_rate);
        }
 
        String compress_status = entity.getCompress_status();
        if (compress_status != null) {
            stmt.bindString(41, compress_status);
        }
 
        String lrclink = entity.getLrclink();
        if (lrclink != null) {
            stmt.bindString(42, lrclink);
        }
 
        String artist_480_800 = entity.getArtist_480_800();
        if (artist_480_800 != null) {
            stmt.bindString(43, artist_480_800);
        }
 
        String relate_status = entity.getRelate_status();
        if (relate_status != null) {
            stmt.bindString(44, relate_status);
        }
        stmt.bindLong(45, entity.getLearn());
 
        String pic_big = entity.getPic_big();
        if (pic_big != null) {
            stmt.bindString(46, pic_big);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(47, artist);
        }
 
        String aliasname = entity.getAliasname();
        if (aliasname != null) {
            stmt.bindString(48, aliasname);
        }
        stmt.bindLong(49, entity.getComment_num());
 
        String album_1000_1000 = entity.getAlbum_1000_1000();
        if (album_1000_1000 != null) {
            stmt.bindString(50, album_1000_1000);
        }
 
        String album_id = entity.getAlbum_id();
        if (album_id != null) {
            stmt.bindString(51, album_id);
        }
        stmt.bindLong(52, entity.getShare_num());
 
        String pic_premium = entity.getPic_premium();
        if (pic_premium != null) {
            stmt.bindString(53, pic_premium);
        }
 
        String all_rate = entity.getAll_rate();
        if (all_rate != null) {
            stmt.bindString(54, all_rate);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(55, author);
        }
 
        String share_url = entity.getShare_url();
        if (share_url != null) {
            stmt.bindString(56, share_url);
        }
 
        String all_artist_id = entity.getAll_artist_id();
        if (all_artist_id != null) {
            stmt.bindString(57, all_artist_id);
        }
 
        String songwriting = entity.getSongwriting();
        if (songwriting != null) {
            stmt.bindString(58, songwriting);
        }
 
        String publishtime = entity.getPublishtime();
        if (publishtime != null) {
            stmt.bindString(59, publishtime);
        }
 
        String copy_type = entity.getCopy_type();
        if (copy_type != null) {
            stmt.bindString(60, copy_type);
        }
 
        String artist_1000_1000 = entity.getArtist_1000_1000();
        if (artist_1000_1000 != null) {
            stmt.bindString(61, artist_1000_1000);
        }
 
        String versions = entity.getVersions();
        if (versions != null) {
            stmt.bindString(62, versions);
        }
 
        String file_duration = entity.getFile_duration();
        if (file_duration != null) {
            stmt.bindString(63, file_duration);
        }
 
        String artist_id = entity.getArtist_id();
        if (artist_id != null) {
            stmt.bindString(64, artist_id);
        }
        stmt.bindLong(65, entity.getOriginal());
 
        String distribution = entity.getDistribution();
        if (distribution != null) {
            stmt.bindString(66, distribution);
        }
 
        String pic_small = entity.getPic_small();
        if (pic_small != null) {
            stmt.bindString(67, pic_small);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(68, info);
        }
        stmt.bindLong(69, entity.getHavehigh());
 
        String bitrate = entity.getBitrate();
        if (bitrate != null) {
            stmt.bindString(70, bitrate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SongInfoEntity entity) {
        stmt.clearBindings();
 
        String song_id = entity.getSong_id();
        if (song_id != null) {
            stmt.bindString(1, song_id);
        }
 
        String resource_type_ext = entity.getResource_type_ext();
        if (resource_type_ext != null) {
            stmt.bindString(2, resource_type_ext);
        }
 
        String resource_type = entity.getResource_type();
        if (resource_type != null) {
            stmt.bindString(3, resource_type);
        }
 
        String del_status = entity.getDel_status();
        if (del_status != null) {
            stmt.bindString(4, del_status);
        }
        stmt.bindLong(5, entity.getCollect_num());
 
        String hot = entity.getHot();
        if (hot != null) {
            stmt.bindString(6, hot);
        }
 
        String sound_effect = entity.getSound_effect();
        if (sound_effect != null) {
            stmt.bindString(7, sound_effect);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(9, language);
        }
        stmt.bindLong(10, entity.getPlay_type());
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(11, country);
        }
 
        String biaoshi = entity.getBiaoshi();
        if (biaoshi != null) {
            stmt.bindString(12, biaoshi);
        }
 
        String bitrate_fee = entity.getBitrate_fee();
        if (bitrate_fee != null) {
            stmt.bindString(13, bitrate_fee);
        }
 
        String song_source = entity.getSong_source();
        if (song_source != null) {
            stmt.bindString(14, song_source);
        }
        stmt.bindLong(15, entity.getIs_first_publish());
 
        String artist_640_1136 = entity.getArtist_640_1136();
        if (artist_640_1136 != null) {
            stmt.bindString(16, artist_640_1136);
        }
 
        String is_secret = entity.getIs_secret();
        if (is_secret != null) {
            stmt.bindString(17, is_secret);
        }
        stmt.bindLong(18, entity.getCharge());
 
        String album_500_500 = entity.getAlbum_500_500();
        if (album_500_500 != null) {
            stmt.bindString(19, album_500_500);
        }
 
        String korean_bb_song = entity.getKorean_bb_song();
        if (korean_bb_song != null) {
            stmt.bindString(20, korean_bb_song);
        }
        stmt.bindLong(21, entity.getHas_mv_mobile());
 
        String album_no = entity.getAlbum_no();
        if (album_no != null) {
            stmt.bindString(22, album_no);
        }
 
        String is_charge = entity.getIs_charge();
        if (is_charge != null) {
            stmt.bindString(23, is_charge);
        }
 
        String pic_radio = entity.getPic_radio();
        if (pic_radio != null) {
            stmt.bindString(24, pic_radio);
        }
 
        String has_filmtv = entity.getHas_filmtv();
        if (has_filmtv != null) {
            stmt.bindString(25, has_filmtv);
        }
 
        String pic_huge = entity.getPic_huge();
        if (pic_huge != null) {
            stmt.bindString(26, pic_huge);
        }
 
        String ting_uid = entity.getTing_uid();
        if (ting_uid != null) {
            stmt.bindString(27, ting_uid);
        }
        stmt.bindLong(28, entity.getExpire());
 
        String pic_singer = entity.getPic_singer();
        if (pic_singer != null) {
            stmt.bindString(29, pic_singer);
        }
 
        String si_proxycompany = entity.getSi_proxycompany();
        if (si_proxycompany != null) {
            stmt.bindString(30, si_proxycompany);
        }
 
        String compose = entity.getCompose();
        if (compose != null) {
            stmt.bindString(31, compose);
        }
 
        String toneid = entity.getToneid();
        if (toneid != null) {
            stmt.bindString(32, toneid);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(33, area);
        }
 
        String original_rate = entity.getOriginal_rate();
        if (original_rate != null) {
            stmt.bindString(34, original_rate);
        }
 
        String artist_500_500 = entity.getArtist_500_500();
        if (artist_500_500 != null) {
            stmt.bindString(35, artist_500_500);
        }
 
        String multiterminal_copytype = entity.getMultiterminal_copytype();
        if (multiterminal_copytype != null) {
            stmt.bindString(36, multiterminal_copytype);
        }
        stmt.bindLong(37, entity.getHas_mv());
 
        String album_title = entity.getAlbum_title();
        if (album_title != null) {
            stmt.bindString(38, album_title);
        }
 
        String piao_id = entity.getPiao_id();
        if (piao_id != null) {
            stmt.bindString(39, piao_id);
        }
 
        String high_rate = entity.getHigh_rate();
        if (high_rate != null) {
            stmt.bindString(40, high_rate);
        }
 
        String compress_status = entity.getCompress_status();
        if (compress_status != null) {
            stmt.bindString(41, compress_status);
        }
 
        String lrclink = entity.getLrclink();
        if (lrclink != null) {
            stmt.bindString(42, lrclink);
        }
 
        String artist_480_800 = entity.getArtist_480_800();
        if (artist_480_800 != null) {
            stmt.bindString(43, artist_480_800);
        }
 
        String relate_status = entity.getRelate_status();
        if (relate_status != null) {
            stmt.bindString(44, relate_status);
        }
        stmt.bindLong(45, entity.getLearn());
 
        String pic_big = entity.getPic_big();
        if (pic_big != null) {
            stmt.bindString(46, pic_big);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(47, artist);
        }
 
        String aliasname = entity.getAliasname();
        if (aliasname != null) {
            stmt.bindString(48, aliasname);
        }
        stmt.bindLong(49, entity.getComment_num());
 
        String album_1000_1000 = entity.getAlbum_1000_1000();
        if (album_1000_1000 != null) {
            stmt.bindString(50, album_1000_1000);
        }
 
        String album_id = entity.getAlbum_id();
        if (album_id != null) {
            stmt.bindString(51, album_id);
        }
        stmt.bindLong(52, entity.getShare_num());
 
        String pic_premium = entity.getPic_premium();
        if (pic_premium != null) {
            stmt.bindString(53, pic_premium);
        }
 
        String all_rate = entity.getAll_rate();
        if (all_rate != null) {
            stmt.bindString(54, all_rate);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(55, author);
        }
 
        String share_url = entity.getShare_url();
        if (share_url != null) {
            stmt.bindString(56, share_url);
        }
 
        String all_artist_id = entity.getAll_artist_id();
        if (all_artist_id != null) {
            stmt.bindString(57, all_artist_id);
        }
 
        String songwriting = entity.getSongwriting();
        if (songwriting != null) {
            stmt.bindString(58, songwriting);
        }
 
        String publishtime = entity.getPublishtime();
        if (publishtime != null) {
            stmt.bindString(59, publishtime);
        }
 
        String copy_type = entity.getCopy_type();
        if (copy_type != null) {
            stmt.bindString(60, copy_type);
        }
 
        String artist_1000_1000 = entity.getArtist_1000_1000();
        if (artist_1000_1000 != null) {
            stmt.bindString(61, artist_1000_1000);
        }
 
        String versions = entity.getVersions();
        if (versions != null) {
            stmt.bindString(62, versions);
        }
 
        String file_duration = entity.getFile_duration();
        if (file_duration != null) {
            stmt.bindString(63, file_duration);
        }
 
        String artist_id = entity.getArtist_id();
        if (artist_id != null) {
            stmt.bindString(64, artist_id);
        }
        stmt.bindLong(65, entity.getOriginal());
 
        String distribution = entity.getDistribution();
        if (distribution != null) {
            stmt.bindString(66, distribution);
        }
 
        String pic_small = entity.getPic_small();
        if (pic_small != null) {
            stmt.bindString(67, pic_small);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(68, info);
        }
        stmt.bindLong(69, entity.getHavehigh());
 
        String bitrate = entity.getBitrate();
        if (bitrate != null) {
            stmt.bindString(70, bitrate);
        }
    }

    @Override
    protected final void attachEntity(SongInfoEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SongInfoEntity readEntity(Cursor cursor, int offset) {
        SongInfoEntity entity = new SongInfoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // song_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // resource_type_ext
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // resource_type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // del_status
            cursor.getInt(offset + 4), // collect_num
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // hot
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sound_effect
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // title
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // language
            cursor.getInt(offset + 9), // play_type
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // country
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // biaoshi
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // bitrate_fee
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // song_source
            cursor.getInt(offset + 14), // is_first_publish
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // artist_640_1136
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // is_secret
            cursor.getInt(offset + 17), // charge
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // album_500_500
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // korean_bb_song
            cursor.getInt(offset + 20), // has_mv_mobile
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // album_no
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // is_charge
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // pic_radio
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // has_filmtv
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // pic_huge
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // ting_uid
            cursor.getInt(offset + 27), // expire
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // pic_singer
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // si_proxycompany
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // compose
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // toneid
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // area
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // original_rate
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // artist_500_500
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // multiterminal_copytype
            cursor.getInt(offset + 36), // has_mv
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // album_title
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // piao_id
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // high_rate
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // compress_status
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // lrclink
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // artist_480_800
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // relate_status
            cursor.getInt(offset + 44), // learn
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // pic_big
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // artist
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // aliasname
            cursor.getInt(offset + 48), // comment_num
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // album_1000_1000
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // album_id
            cursor.getInt(offset + 51), // share_num
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // pic_premium
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53), // all_rate
            cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54), // author
            cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55), // share_url
            cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56), // all_artist_id
            cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57), // songwriting
            cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58), // publishtime
            cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59), // copy_type
            cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60), // artist_1000_1000
            cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61), // versions
            cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62), // file_duration
            cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63), // artist_id
            cursor.getInt(offset + 64), // original
            cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65), // distribution
            cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66), // pic_small
            cursor.isNull(offset + 67) ? null : cursor.getString(offset + 67), // info
            cursor.getInt(offset + 68), // havehigh
            cursor.isNull(offset + 69) ? null : cursor.getString(offset + 69) // bitrate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SongInfoEntity entity, int offset) {
        entity.setSong_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setResource_type_ext(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setResource_type(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDel_status(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCollect_num(cursor.getInt(offset + 4));
        entity.setHot(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSound_effect(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLanguage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPlay_type(cursor.getInt(offset + 9));
        entity.setCountry(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBiaoshi(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBitrate_fee(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSong_source(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIs_first_publish(cursor.getInt(offset + 14));
        entity.setArtist_640_1136(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIs_secret(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCharge(cursor.getInt(offset + 17));
        entity.setAlbum_500_500(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setKorean_bb_song(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setHas_mv_mobile(cursor.getInt(offset + 20));
        entity.setAlbum_no(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setIs_charge(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setPic_radio(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setHas_filmtv(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setPic_huge(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setTing_uid(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setExpire(cursor.getInt(offset + 27));
        entity.setPic_singer(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setSi_proxycompany(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setCompose(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setToneid(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setArea(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setOriginal_rate(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setArtist_500_500(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setMultiterminal_copytype(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setHas_mv(cursor.getInt(offset + 36));
        entity.setAlbum_title(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setPiao_id(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setHigh_rate(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setCompress_status(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setLrclink(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setArtist_480_800(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setRelate_status(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setLearn(cursor.getInt(offset + 44));
        entity.setPic_big(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setArtist(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setAliasname(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setComment_num(cursor.getInt(offset + 48));
        entity.setAlbum_1000_1000(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setAlbum_id(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setShare_num(cursor.getInt(offset + 51));
        entity.setPic_premium(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setAll_rate(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
        entity.setAuthor(cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54));
        entity.setShare_url(cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55));
        entity.setAll_artist_id(cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56));
        entity.setSongwriting(cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57));
        entity.setPublishtime(cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58));
        entity.setCopy_type(cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59));
        entity.setArtist_1000_1000(cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60));
        entity.setVersions(cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61));
        entity.setFile_duration(cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62));
        entity.setArtist_id(cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63));
        entity.setOriginal(cursor.getInt(offset + 64));
        entity.setDistribution(cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65));
        entity.setPic_small(cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66));
        entity.setInfo(cursor.isNull(offset + 67) ? null : cursor.getString(offset + 67));
        entity.setHavehigh(cursor.getInt(offset + 68));
        entity.setBitrate(cursor.isNull(offset + 69) ? null : cursor.getString(offset + 69));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SongInfoEntity entity, long rowId) {
        return entity.getSong_id();
    }
    
    @Override
    public String getKey(SongInfoEntity entity) {
        if(entity != null) {
            return entity.getSong_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SongInfoEntity entity) {
        return entity.getSong_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
